/* 
   The following queries are the optimized queries used in the website
   The create index are all queried directly to the db and done only once. They are not placed in the code.
   ${searchInput} are for the NodeJS code, when querying in MySQL this must be replaced with the value being searched for
*/

/*INDEXES*/
CREATE INDEX idx_year 
ON Movies (year);

CREATE INDEX idx_mix_category
ON Title_principals (category, imdb_title_id);

CREATE INDEX idx_name ON Names(name);

CREATE INDEX idx_movie ON Movies(title);

CREATE INDEX idx_language ON Movies (language);

CREATE INDEX idx_metascore ON Movies (metascore);


/*Query 1*/
SELECT title, year, genre, director, duration
FROM Movies
WHERE Language = "English"
ORDER BY year DESC;

/*Query 2*/
SELECT title, year, genre, director, metascore
FROM Movies
WHERE metascore >= 81
ORDER BY metascore DESC;

/*Query 3*/
SELECT production_company, COUNT(production_company) AS number_of_movies, FORMAT(AVG(weighted_average_vote), 2) AS average_vote_of_movies
FROM Movies m
JOIN Ratings r
ON m.imdb_title_id = r.imdb_title_id
GROUP BY production_company
HAVING number_of_movies >= 200
ORDER BY average_vote_of_movies DESC
LIMIT 10;

SELECT production_company, title, year, genre, director, duration, MAX(weighted_average_vote) AS rating
FROM Movies m
JOIN Ratings r 
ON m.imdb_title_id = r.imdb_title_id
WHERE production_company IN
  (SELECT production_company
   FROM 
      (SELECT production_company, COUNT(production_company) AS number_of_movies, FORMAT(AVG(weighted_average_vote), 2) AS average_vote_of_movies
       FROM Movies m
       JOIN Ratings r
       ON m.imdb_title_id = r.imdb_title_id
       GROUP BY production_company
       HAVING number_of_movies >= 200
       ORDER BY average_vote_of_movies DESC
       LIMIT 10) AS T2)
GROUP BY production_company
ORDER BY rating DESC;

/*Query 4*/
SELECT COUNT(*) AS count_films
FROM Movies, Title_principals, Names
WHERE Names.imdb_name_id = Title_principals.imdb_name_id
AND Title_principals.imdb_title_id = Movies.imdb_title_id
AND (Title_principals.category = "actor" OR Title_principals.category = "actress")
AND Names.name like "%${searchInput}%";

SELECT title, year, genre, director, duration
FROM Movies, Title_principals, Names
WHERE Names.imdb_name_id = Title_principals.imdb_name_id 
AND Title_principals.imdb_title_id = Movies.imdb_title_id
AND Title_principals.category IN ("actor", "actress")
AND Names.name like "%${searchInput}%";

/*Query 5*/
SELECT DISTINCT T1.year, m1.title, m1.director, COALESCE(tp1.job,'None') AS job, T1.Ratings
FROM (SELECT    m2.year, MAX(r2.weighted_average_vote) AS 'Ratings'
      FROM      Movies m2, Ratings r2
      WHERE     r2.imdb_title_id=m2.imdb_title_id
      GROUP BY m2.year) T1, Movies m1, Title_principals tp1, Ratings r1
WHERE  (T1.year = m1.year 
       AND T1.Ratings = r1.weighted_average_vote)
       AND r1.imdb_title_id=m1.imdb_title_id
       AND m1.imdb_title_id=tp1.imdb_title_id
       AND tp1.category ="director"
       AND T1.year LIKE "%${searchInput}%"
ORDER BY T1.year ASC;

SELECT DISTINCT T1.year, m1.title, m1.director, COALESCE(tp1.job,'None') AS job, T1.Ratings
FROM (SELECT    m2.year, MIN(r2.weighted_average_vote) AS 'Ratings'
     FROM      Movies m2, Ratings r2
     WHERE     r2.imdb_title_id=m2.imdb_title_id
     GROUP BY m2.year) T1, Movies m1, Title_principals tp1, Ratings r1
WHERE (T1.year = m1.year 
       AND T1.Ratings = r1.weighted_average_vote)
       AND r1.imdb_title_id=m1.imdb_title_id
       AND m1.imdb_title_id=tp1.imdb_title_id
       AND tp1.category ="director"
       AND T1.year LIKE "%${searchInput}%"
ORDER BY T1.year ASC;

/*Query 6*/
SELECT T1.Ordering, N.name, M.title, COALESCE(P.category,'None') AS 'Job', TRIM(TRAILING ']' FROM TRIM(LEADING '[' 
      FROM(REPLACE(COALESCE(P.characters,'None'), '"', '')))) AS 'Characters'
FROM (SELECT AVG(P1.ordering) AS 'Ordering', N1.imdb_name_id
FROM   Title_principals P1 
JOIN   Movies M1 ON P1.imdb_title_id = M1.imdb_title_id
JOIN   Names N1 ON N1.imdb_name_id = P1.imdb_name_id 
WHERE N1.name LIKE "%${searchInput}%"
GROUP BY N1.name) T1
JOIN  Names N ON T1.imdb_name_id = N.imdb_name_id
JOIN  Title_principals P ON N.imdb_name_id = P.imdb_name_id 
JOIN  Movies M ON P.imdb_title_id = M.imdb_title_id;

/*Query 7*/
SELECT name, year, b.best_year_rating, title,  max(weighted_average_vote) as movie_rating, job, characters
FROM Names n , Title_principals t, Movies m, Ratings r, 
     (SELECT a.name as best_name, a.year as best_year, 
           max(year_rating) as best_year_rating
       FROM ( SELECT name, year, avg(weighted_average_vote) 
                   as year_rating
              FROM Names n , Title_principals t, Movies m, Ratings r
               WHERE n.imdb_name_id = t.imdb_name_id 
                     AND t.imdb_title_id = m.imdb_title_id 
                     AND m.imdb_title_id = r.imdb_title_id
                     AND name LIKE "%${searchInput}%"
               GROUP BY name, year
               ORDER BY name) a
       GROUP BY a.name
       ORDER BY a.name)b
WHERE n.imdb_name_id = t.imdb_name_id 
      AND t.imdb_title_id = m.imdb_title_id 
      AND m.imdb_title_id = r.imdb_title_id
      AND name = best_name 
      AND year = best_year
GROUP BY name
ORDER BY name;
